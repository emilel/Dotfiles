# sudo snap install pdftk; pdftk in.pdf output out.pdf uncompress; LESSOPEN="" less out.pdf

# random
alias nonoti='notify-send DUNST_COMMAND_PAUSE'
alias noti='notify-send DUNST_COMMAND_RESUME'
alias k='echo "hoppsan..."'
alias dkill='docker container kill $(docker ps -q); docker container rm $(docker ps -a -q)'
alias areload='source ~/.zsh_aliases'


# why tho
# alias splitv='export SPLIT=v'
# alias splitb='export SPLIT=h'

# shortcuts
alias t='tmux a'
alias v='nvim'
alias up='..'
alias upp='../..'
alias uppp='../../..'
alias bt='bluetoothctl'
alias cbt='echo "connect 94:DB:56:52:B5:87" | bluetoothctl'
alias dcbt='echo "disconnect 94:DB:56:52:B5:87" | bluetoothctl'
alias dog='bat --paging never --number'
alias py='python3'
alias lower="rename -v 'y/A-Z/a-z/'"
alias rmspace="rename -v 's/ /_/g'"
alias rmsym="rename -v 's/\(|\[|\]|\)//g'"
alias -g path="readlink -nf"
# alias xargs='tr \\n \\0 | xargs -0 '
alias _='cd ~'
alias bell="echo -e '\a'"
alias sssdconf='sudo sed -i.bak "s/default_shell = \/bin\/bash/default_shell = \/bin\/zsh\\noverride_shell = \/bin\/zsh/g" /etc/sssd/sssd.conf; sudo systemctl restart sssd'
alias back='cd -'
alias icat="kitty +kitten icat"
alias c='clear'



# custom program settings
# alias ll='ls -hvl'
# alias lt='ls -t'
# alias la='ls -A'
# alias llt='ls -hlt'
# alias lx='ls -X'
alias ls='ls -v --group-directories-first --color=auto'
alias mv='mv -nv'
alias cp='cp -nv'
alias rm='rm -v'
# alias fl='fd -l'
# alias fa='fd -H'
# alias fs='fd --exact-depth 1'
# alias fsa='fd --exact-depth 1 -H'
# alias fsal='fd --exact-depth 1 -H -l'
# alias fdd='fd --exact-depth 1 --type d'
# alias fddl='fd --exact-depth 1 --type d -l'
# alias fdda='fd --exact-depth 1 --type d -H'
# alias fddal='fd --exact-depth 1 --type d -H -l'

# conf
alias conf='cd ~/Dotfiles && nvim -c "Tfiles" && cd -'


# key shortcuts

# vim keys for tab suggestions
bindkey -M menuselect 'h' vi-backward-char
bindkey -M menuselect 'k' vi-up-line-or-history
bindkey -M menuselect 'l' vi-forward-char
bindkey -M menuselect 'j' vi-down-line-or-history


# edit command in editor
bindkey -M vicmd 'V' edit-command-line

# fzf
bindkey '^A' fzf-file-widget
bindkey '^S' fzf-cd-widget


# open fzf
zle -N n
bindkey '^U' n


# functions
open() {
    for word in $@
    do
        xdg-open $word 2>/dev/null &disown
    done
}

viewpdf() {
    pdftoppm -jpeg $@ | icat --place 100x100@0x0
}


rmswe() {
    rename -v 's/å/a/g' $@
    rename -v 's/ä/a/g' $@
    rename -v 's/ö/o/g' $@
}

# mkdir and touch
touchp() {
    mkdir -p "$(dirname "$1")" && touch "$1"
}

rep() {
    action="$1"
    shift
    for file in $@
    do
        $action $file
        echo
    done
}

fzfopen() {
    for file in $(fzf -m --preview-window=down --preview "bat --color=always --line-range :50 {}")
    do
        xdg-open $file 2>/dev/null &disown
    done
}

pushnew() {
  git push --set-upstream origin $(git rev-parse --abbrev-ref HEAD)
}

pptxtopdf() {
    soffice --headless --convert-to pdf $1
}

cd() {
    builtin cd $1
    echo $(pwd) > ~/.last_dir
}

cdl() {
    cd $(cat ~/.last_dir)
}

n ()
{
    # Block nesting of nnn in subshells
    if [ -n $NNNLVL ] && [ "${NNNLVL:-0}" -ge 1 ]; then
        echo "nnn is already running"
        return
    fi

    # The default behaviour is to cd on quit (nnn checks if NNN_TMPFILE is set)
    # To cd on quit only on ^G, remove the "export" as in:
    #     NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
    # NOTE: NNN_TMPFILE is fixed, should not be modified
    export NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

    # Unmask ^Q (, ^V etc.) (if required, see `stty -a`) to Quit nnn
    # stty start undef
    # stty stop undef
    # stty lwrap undef
    # stty lnext undef

    nnn -R "$@"

    if [ -f "$NNN_TMPFILE" ]; then
            . "$NNN_TMPFILE"
            rm -f "$NNN_TMPFILE" > /dev/null
    fi
}

# view as prepend
view() {
    if [ -f "$1" ]
    then
        nvim -R -u ~/.vimrc.view +AnsiEsc $@
    else
        $@ | nvim -R -u ~/.vimrc.view +AnsiEsc
    fi
}

# copy as prepend
copy() {
    $@ | perl -pe 'chomp if eof' | xclip -selection clipboard
}


pdftext() {
    view pdftotext $@ -
}
